                                                                    HTML

<!--aqui o campo está com um placeholder &nbsp pois vai pegar o elemento de acordo com a variável campoStatus no script-->
    <h3 id="campoStatus">&nbsp;</h3>

<!-- aqui estão inseridos o src da ethers.js, necessário para pegar os comandos, e o src do abi do contrato
    ambos usadas para os scripts para conectar o contrato deployed já no etherscan e a página web que vai
    acionar suas funções.-->
    
    <script charset="utf-8"  src="https://cdn.ethers.io/scripts/ethers-v4.min.js" type="text/javascript"></script>
    <script src="javascript/abi.js"></script>    
    

<script>
        var status;
        var campoStatus = document.getElementById("campoStatus"); 
        var enderecoContrato = "0x891710b3475b3076Dd1F9C6a6A9b1f87BA5e0517";
        
/*getDefaultProvider é pq pode ser qualquer provedor padão de hj, no caso o infura. Ele é o provedor de conexão.
No caso ele vai conectar com a rede rinkerby, conforme parâmetro. Se fosse a principal, seria main*/
        
    var provedor = ethers.getDefaultProvider('rinkeby');
        
/*Essa é a varivel que vai pegar o contrato, informando o endereço dele, a abi e a conexão. Ele está unindo o provedor de conexão,
 a interface (tudo que tem publico no SC, abi), e apontou o endereço do SC na rede ethereum correspondente. Com isso o Ether.js recebe 
 e consegue ler, exibindo para o usuário*/ 
    
    var contrato = new ethers.Contract(enderecoContrato, abiContrato, provedor);

/*
.them -> é uma promessa. vai dar o resultado do function quando ela acontecer

=> ---> é uma arrow function, modo mais fácil de fazer uma função.
    ex: função function abc(uint256 valor){ }
        pode ser escrita como:
        (valor) => { }

.catch -> ela vai pegar algo, no caso, se der erro.

console.error(err) -> vai mostrar o erro no console do dev.

No arquivo essa promessa e arrow function: 

     contrato.statusPagamentoAluguel()
            .then( (resultado) => {
                campoStatus.innerHTML = resultado;
            })
            .catch( (err) => {
                console.error(err);
                campoStatus.innerHTML = err;
            });                 

Ela chama uma função, faz uma promessa de exibir algo e pega o erro se tiver.


                                                        abi.js

/*Arquivo abi com a copia do ABI pelo remix, para fazer conversar com o solidity.
no caso ela foi copiada para a variável abiContrato criada para isso.
Observa que elas são apenas as informações públicas, e não o código do contrato em si.
EX no campo 
		
		"constant": false,
		"inputs": [],
		"name": "pagarFianca",
		"outputs": [],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"

Ela exibe que é a função de pagar a fiança, se é pagável, o nome, se tem returns (output:[] 
como não tem na função é vazio), entre outros*/

                                                    BLOCKCHAIN.JS

//Esse novo provider é colocado pq, para registrar as mudanças na blockchain, ele tem que se conectar com o metamask, nesse caso chamado web3 aqui.
    var provedor = new ethers.providers.Web3Provider(web3.currentProvider);

//aqui ele pede o pra autorizar o metamask a se conectar com o contrato para fazer as mudanças, como a pagina que abre quando faz elas no remix, que o meta pede pra se conectar.
    ethereum.enable();

//Aqui ele pede quem assinou o contrato, nesse caso a conta da imobiliaria, pq so ela pode conectar e alterar o status, de acordo com o contrato.
    var signatario = provedor.getSigner();

//Aqui ele perde new, ou seja, uma nova instancia do contrato, com o endereço, abi, e, diferente da var antiga do html, que só o endereço pra visualizar, agora ele vai pedir 
//o endereço do usuario que vai modificar. Ou seja, ele instanciou um novo contrato para trabalhar com essas funções. 
    var contrato = new ethers.Contract(enderecoContrato, abiContrato, signatario);

//No JS a função mudaStatusPagamento, no seus if, pede um .wait, pois deve esperar aquela transação ser minerada.
    function registrarMudancaStatus() {
    var textoCampo = document.frmStatus.txtStatusPagamentoAluguel.value;
    var caixaStatusTx = document.getElementById("caixaStatusTx");
    if (textoCampo.length === 8) {
        caixaStatusTx.innerHTML = "Enviando transação...";
        contrato.mudaStatusPagamento(textoCampo)
        .then( (transacao) => {
            console.log("registrarMudancaStatus - Transacao ", transacao);   
            caixaStatusTx.innerHTML = "Transação enviada. Aguardando processamento...";

//Aqui fica a o comando wait para esperer a mineração, pois, conforme visto anteriormente, o.then é uma promessa, que vai exibir um resultado futuro.            
            transacao.wait()
            .then( (resultado) => {
                buscaStatusContrato();
                caixaStatusTx.innerHTML = "Transação realizada.";
            })        
            .catch( (err) => {
                console.error("registrarMudancaStatus - Aguardando tx ser minerada");
                console.error(err);
                caixaStatusTx.innerHTML = "Algo saiu errado: " + err.message;
            })
        })
        .catch( (err) => {
            console.error("registrarMudancaStatus");
            console.error(err);
            caixaStatusTx.innerHTML = "Algo saiu errado: " + err.message;
        })
        }
    }
                                                        Solidity

//Função que muda o status do pagamento quando o funcionário da imoboliaria pede

    function mudaStatusPagamento(string memory _descricao) public {
            require(msg.sender == imobiliaria, "Somente imobiliaria pode alterar o status do contrato");
            if (keccak256(abi.encodePacked(_descricao)) == keccak256("atrasado")) {
                statusPagamentoAluguel = false;
                contratoAtivo = false;
                enderecoLocador.transfer(address(this).balance);
            }

No HTML a o campo que vai pedir e permitir esse evento é o form:

    <form action="#" method="get" id="frmStatus" name="frmStatus" onsubmit="registrarMudancaStatus(); return false;">
            <div>
                <label for="txtStatusPagamentoAluguel">Informe o novo Status: </label>
                <input type="text" name="txtStatusPagamentoAluguel" id="txtStatusPagamentoAluguel" maxlength="8">
            </div>
            <div>
                &nbsp;
            </div>
            <div>
                <button type="submit">Registrar Novo Status</button>
            </div>
            <div><br><hr></div>
            <div id="caixaStatusTx">
                &nbsp;
            </div>
        </form>